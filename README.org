* Users API

A simple API for managing users.

* Requirements

Create a microservice with the following:

- A User rest Resource that allows clients to create, read, update, delete a user or a list of users.
- You can use a database of your choice but it's also fine to just use a map or dictionary in memory to keep track of users by their ids.
- Use structured logging.
- Add Metrics (e.g. statsd, dropwizard, prometheus, to time routes)
- Write unit tests for the service.
- Generate a code coverage report.
- The user JSON can just be id, first name, last name, zip code, and email address.

* Running Users API

Running the service is trivially easy as follows, assuming you're in
the top-level directory of this repo:

#+BEGIN_SRC
python -m users
#+END_SRC

This runs in development mode, with automatic reloading, on port 5000.

* Coverage

[[file:coverage.svg]]

Coverage reporting is generated automatically with output to both the
terminal and as an html report in [[./coverage_html/index.html][coverage_html/]]

Configuration lives in [[./setup.cfg][setup.cfg]].

Configuration badge is generated by [[https://github.com/dbrgn/coverage-badge][coverage-badge]] and auto-generated
by ./bin/pre-commit-hook.sh. To enabled pre-commit badge regeneration,
hook it up as below. Just copy-paste the command, because you know
you're going to get the arguments to ~ln~ wrong the first time....

#+BEGIN_SRC
ln -s ../../bin/pre-commit-hook.sh .git/hooks/pre-commit
#+END_SRC

* Development Log and Notes

- <2020-02-08 Sat 13:05> Initial setup. Learning a lot about Flask,
  this is fun. Basic app running with a trivial healthcheck and
  simple 404 handler

- <2020-02-08 Sat 14:45> learning so much... Have coverage reporting
  in place and working to my satisfaction.

- <2020-02-08 Sat 15:44> so much churn with structure and names...

- <2020-02-08 Sat 16:40> TDD w/ python! Implementation of simple
  persistence with in-memory dict, can create and read users

- <2020-02-09 Sun 09:50> start building up logging
  configuration. structlog has too many features for my experience
  level with python loggers...

- <2020-02-09 Sun 12:51> feeling like my lack of python knowledge is
  getting in the way of some of the configuration-ey bits. But tests
  pass, app functions when run from the command line. Time to move on
  to proper implementation of the APIs.

- <2020-02-09 Sun 14:47> this is more like it, into
  red-green-refactor-like sort of workflow

- <2020-02-09 Sun 14:49> interesting observation -- this API is so
  simple, there's really just no need for classes. I've implemented
  this, so far, as just a bunch of modules, and I feel like I'm
  getting decent isolation, separation of concerns, etc, without a
  real need for a class structure. That said, if this gets much
  bigger, that will change as I bump up against duplication.

- <2020-02-09 Sun 15:54> this is fun. With some renaming, a bit of
  cleanup, and proper teardown of the user database between tests,
  implementing listing of users becomes straightforward. I believe
  this is functionally complete for our requirements. On to validations.
