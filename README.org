* Users API

A simple API for managing users.

* Requirements

Create a microservice with the following:

- A User rest Resource that allows clients to create, read, update,
  delete a user or a list of users.
  - unclear if the 'list of users' refers to just read, or all
    operations. I've opted for implementing just read.
- You can use a database of your choice but it's also fine to just use
  a map or dictionary in memory to keep track of users by their ids.
  - I chose to use a simple in-memory dict for ease
- Use structured logging.
  - used [[https://www.structlog.org/en/stable/#][structlog]] and have injected a request id into every log
    message (hopefully!)
- Add Metrics (e.g. statsd, dropwizard, prometheus, to time routes)
  - wired up [[https://github.com/pilosus/flask_prometheus_metrics][flask_prometheus_metrics]] which seems to just work
- Write unit tests for the service.
  - used TDD throughout the process
- Generate a code coverage report.
  - wired up coverage with pytest-cov plugin and automatic badge
    update for fun.
- The user JSON can just be id, first name, last name, zip code, and
  email address.
  - implemented validation requiring *all* 4 keys(5 for updates) and
    no extra keys

* Setting up

Assuming you've already cloned this repo, then you can prepare to run
this app as follows:

#+BEGIN_SRC
virtualenv -p python3 venv
source venv/bin/activate
pip install -r requirements.txt
#+END_SRC

Once that process completes, you should be able to run tests or the
app as below.

* Running Users API

Running the service is trivially easy as follows, assuming you're in
the top-level directory of this repo:

#+BEGIN_SRC
python -m users
#+END_SRC

This runs in development mode, with automatic reloading, on port 5000.

* Running tests

Tests are done in vanilla pytest. To run them, simply do:

#+BEGIN_SRC
pytest
#+END_SRC

To run a specific test file

#+BEGIN_SRC
pytest tests/path/to/desired/test_file.py
#+END_SRC

or, to run a specific test

#+BEGIN_SRC
pytest tests/path/to/desired/test_file.py::test_method_to_run
#+END_SRC

* Coverage

[[file:coverage.svg]]

Coverage reporting is generated automatically with output to both the
terminal and as an html report in ./coverage_html/index.html, after
running the tests.

Configuration lives in [[./setup.cfg][setup.cfg]].

Configuration badge is generated by [[https://github.com/dbrgn/coverage-badge][coverage-badge]] and auto-generated
by ./bin/pre-commit-hook.sh. To enabled pre-commit badge regeneration,
hook it up as below. Just copy-paste the command, because you know
you're going to get the arguments to ~ln~ wrong the first time....

#+BEGIN_SRC
ln -s ../../bin/pre-commit-hook.sh .git/hooks/pre-commit
#+END_SRC

* Development Log and Notes

- <2020-02-08 Sat 13:05> Initial setup. Learning a lot about Flask,
  this is fun. Basic app running with a trivial healthcheck and
  simple 404 handler

- <2020-02-08 Sat 14:45> learning so much... Have coverage reporting
  in place and working to my satisfaction.

- <2020-02-08 Sat 15:44> so much churn with structure and names...

- <2020-02-08 Sat 16:40> TDD w/ python! Implementation of simple
  persistence with in-memory dict, can create and read users

- <2020-02-09 Sun 09:50> start building up logging
  configuration. structlog has too many features for my experience
  level with python loggers...

- <2020-02-09 Sun 12:51> feeling like my lack of python knowledge is
  getting in the way of some of the configuration-ey bits. But tests
  pass, app functions when run from the command line. Time to move on
  to proper implementation of the APIs.

- <2020-02-09 Sun 14:47> this is more like it, into
  red-green-refactor-like sort of workflow

- <2020-02-09 Sun 14:49> interesting observation -- this API is so
  simple, there's really just no need for classes. I've implemented
  this, so far, as just a bunch of modules, and I feel like I'm
  getting decent isolation, separation of concerns, etc, without a
  real need for a class structure. That said, if this gets much
  bigger, that will change as I bump up against duplication.

- <2020-02-09 Sun 15:54> this is fun. With some renaming, a bit of
  cleanup, and proper teardown of the user database between tests,
  implementing listing of users becomes straightforward. I believe
  this is functionally complete for our requirements. On to validations.

- <2020-02-09 Sun 17:42> Okay, I've put more than enough time into
  this. Final thoughts:
  - this is *not* production ready code with many shortcomings,
    discussed below, and
  - this was really fun. Flask and friends make it super easy to
    quickly spin up a simple API like this, and I don't see anything
    that suggests it's not suitable for taking all the way to
    production,
  - documentation of everything I used here is pretty strong, I was
    able to come up to speed in no time at all, and finally
  - I'm really pleased with how much I got done considering I have
    basically no applicable Python experience. That is, my Python
    experience is not super applicable -- setting up a Flask app, and
    even a basic Python project is new to me.
  - I'm sort of stunned by how I don't need an object hierarchy to
    make useful services easily. Obviously, there are benefits to
    spinning up classes to get shared behavior, but for this simple
    case, it's just not necessary. Simple is always better, and here,
    everything is simple.


* Shortcomings

A list of things that are wrong here, aren't up to production
standards, or are just missing:

- security. yeah, nothing done here at all.
- field-level API validations. I'm only validating that the fields are
  present, not that their contents are well-formed or applicable for
  their intended use.
- no handling of request headers at all. Of particular note here is
  there are Content-Type problems. If the Content-Type header isn't
  set properly, things fail. You can demonstrate this by POSTING with
  curl.
- a real database. obviously, I chose to just use an in-memory
  dictionary, so there is no handling of duplicate records, no
  persistence across runs of the app, etc.
- site-specific configuration is not done at all. Ideally, I'd be able
  to inject configuration at deployment time to enable to this to
  behave appropriately depending on the deployed environment. But,
  with project setup being a weakness, I didn't think it was worth my
  time for this little project.
